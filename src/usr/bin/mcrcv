#!/usr/bin/python3
import sys
import socket
import struct
import datetime
import argparse
import json
import time

current_nano_time = lambda: int(round(time.time() * 1000000))

# set to 1 if you want a 'spinner' to increment when a packet is received
display_spinner = 1
display_detail = 0

interval_seconds = 1
current_interval = lambda: int(round(time.time())/interval_seconds)
lastPacketInterval = 0

lastHops = -1
lastSeqNum = -1

pkts_in_this_second = 0
bits_in_this_second = 0


def spinning_cursor():
    while True:
        #for cursor in '|/-\\':
        for cursor in '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz':
            yield cursor

spinner = spinning_cursor()

def parse(addr, ttl, tos, pkt):
    global lastSeqNum
    global lastHops

    global lastPacketInterval
    global pkts_in_this_second
    global bits_in_this_second

    addport = str(addr[0]) + ":" + str(addr[1])
    rcvTime = current_nano_time()
    thisPacketInterval = current_interval()
    if pkt != "NOMESG":
      bitsRcv = len(pkt)*8

    if pkt == "NOMESG" and pkts_in_this_second == 0:
      # not receiving
      return

    # add packet data to current interval. If this is a new interval, output interval data and reset.
    if lastPacketInterval != thisPacketInterval and lastPacketInterval != 0:
      # new interval, output last interval
      bps_second = bits_in_this_second
      niceTime = datetime.datetime.fromtimestamp(interval_seconds * lastPacketInterval).strftime("%Y-%m-%d %H:%M:%S")
      numsec = ""
      if interval_seconds != 1:
        numsec = "for "+str(interval_seconds)+" sec"
      hops = ""
      if lastHops > -1:
        hops = "("+str(lastHops)+" hops)"
      print("\rSTATUS: Receive",addport,"TTL=",ttl,hops,numsec,"from",niceTime,":", pkts_in_this_second," packets at ",(bits_in_this_second/interval_seconds),"bits/sec")
      bits_in_this_second = 0
      pkts_in_this_second = 0

    if pkt == "NOMESG":
        return

    lastPacketInterval = thisPacketInterval
    pkts_in_this_second = pkts_in_this_second + 1
    bits_in_this_second = bits_in_this_second + bitsRcv

    try:
      obj = json.loads(pkt.decode())
      latency = rcvTime - obj["time"]
      seqdiff = obj["seq"] - lastSeqNum
      if seqdiff != 1 and lastSeqNum > -1:
        print("DETAIL: Out of sequence packet!",lastSeqNum,"->",obj["seq"])
      lastSeqNum = obj["seq"]
      lastHops = obj["initial_ttl"] - ttl
      if display_spinner:
        print("\r",next(spinner), end='', flush=True, sep="")
      if display_detail:
        hops = ""
        if lastHops > -1:
          hops = "("+str(lastHops)+" hops)"
        niceHops = "("+str(lastHops)+" hops)"
        print("Receive",addport,"TOS=",tos,"TTL=",ttl,niceHops,"Seq=",obj["seq"]);

    except: 
      # can't parse payload
      if display_detail:
        print("DETAIL: Received unknown data from ",addr," total ",bitsRcv,"bits")
      lastHops = -1

def run(groups, port, iface=None, bind_group=None):
    # generally speaking you want to bind to one of the groups you joined in
    # this script,
    # but it is also possible to bind to group which is added by some other
    # programs (like another python program instance of this)

    # assert bind_group in groups + [None], \
    #     'bind group not in groups to join'
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)

    # allow reuse of socket (to allow another instance of python running this
    # script binding to the same ip/port)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

    sock.bind(('' if bind_group is None else bind_group, port))
    for group in groups:
        print("Listening to",group,":",port)
        mreq = struct.pack(
            '4sl' if iface is None else '4s4s',
            socket.inet_aton(group),
            socket.INADDR_ANY if iface is None else socket.inet_aton(iface))

        sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)

    # IP_RECVTTL is 12
    sock.setsockopt(socket.IPPROTO_IP, 12, 1)
    # IP_REVCTOS is 13
    sock.setsockopt(socket.IPPROTO_IP, 13, 1)

    sock.settimeout(1)
    while True:
        try:
            resp = sock.recvmsg(65536, 1024)
            data = resp[0]
            ancdata = resp[1]
            flags = resp[2]
            add = resp[3]
            # ancdata is an array of 
            #    cmsg_level, cmsg_type, cmsg_data
            # ttl = anddata[0]
            ttlmsg = ancdata[0]
            tosmsg = ancdata[1]
            ttlbytes = ttlmsg[2]
            tosbytes = tosmsg[2]
            ttl = int.from_bytes(ttlbytes, byteorder='little', signed=False)
            tos = int.from_bytes(tosbytes, byteorder='little', signed=False)
            parse(add, ttl, tos, data)
        except KeyboardInterrupt:
            raise SystemExit
        except:
            parse("0.0.0.0",0,0,"NOMESG")


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--port', type=int, default=19900, help="Port to listen on")
    parser.add_argument('-v', '--showdetail', action='store_true', help="Print detail for every packet recieved")
    parser.add_argument('-g', '--groups', default=["239.5.6.7"], nargs='*',
                        help='multicast groups (ip addrs) to listen and join')
    parser.add_argument(
        '--iface', default=None,
        help='local interface to use for listening to multicast data; '
        'if unspecified, any interface would be chosen')
    parser.add_argument(
        '--bind-group', default=None,
        help='multicast groups (ip addrs) to bind to for the udp socket; '
        'should be one of the multicast groups joined globally '
        '(not necessarily joined in this python program) '
        'in the interface specified by --iface. '
        'If unspecified, bind to 0.0.0.0 '
        '(all addresses (all multicast addresses) of that interface)')
    args = parser.parse_args()
    print("Listening to",args.groups)
    if args.showdetail:
      display_detail = 1
    run(args.groups, args.port, args.iface, args.bind_group)
