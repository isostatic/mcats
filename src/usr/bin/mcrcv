#!/usr/bin/env python3
import sys
import socket
import struct
import datetime
import argparse
import json
import time

current_nano_time = lambda: int(round(time.time() * 1000000))

# set to 1 if you want a 'spinner' to increment when a packet is received
display_spinner = 1
display_detail = 0

ts_data_start = 0
ts_data = bytearray()

interval_seconds = 1
current_interval = lambda: int(round(time.time())/interval_seconds)

lastPacketInterval = {}
lastHops = {}
lastSeqNum = {}

pkts_in_this_second = {}
bits_in_this_second = {}


def spinning_cursor():
    while True:
        #for cursor in '|/-\\':
        for cursor in '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz':
            yield cursor

spinner = spinning_cursor()

def parse(addr, ttl, tos, pkt):
    global lastSeqNum
    global lastHops

    global lastPacketInterval
    global pkts_in_this_second
    global bits_in_this_second

    if addr not in lastPacketInterval:
        lastPacketInterval[addr] = 0

    if addr not in lastHops:
        lastHops[addr] = -1

    if addr not in lastSeqNum:
        lastSeqNum[addr] = -1

    if addr not in bits_in_this_second:
        bits_in_this_second[addr] = 0

    if addr not in pkts_in_this_second:
        pkts_in_this_second[addr] = 0

    addport = str(addr[0]) + ":" + str(addr[1])
    nicetos = ""
    if tos >= 0:
      nicetos = "TOS="+str(tos)
    nicettl = ""
    if ttl >= 0:
      nicettl = "TTL="+str(ttl)

    rcvTime = current_nano_time()
    thisPacketInterval = current_interval()
    if pkt != "NOMESG":
      bitsRcv = len(pkt)*8

    if pkt == "NOMESG" and pkts_in_this_second[addr] == 0:
      # not receiving
      return

    # add packet data to current interval. If this is a new interval, output interval data and reset.
    if lastPacketInterval[addr] != thisPacketInterval and lastPacketInterval[addr] != 0:
      # new interval, output last interval
      bps_second = bits_in_this_second[addr]
      niceTime = datetime.datetime.fromtimestamp(interval_seconds * lastPacketInterval[addr]).strftime("%Y-%m-%d %H:%M:%S")
      numsec = ""
      if interval_seconds != 1:
        numsec = "for "+str(interval_seconds)+" sec"
      hops = ""
      if lastHops[addr] > -1:
        hops = "("+str(lastHops[addr])+" hops)"
      status("\rSTATUS: Receive",addport,nicetos,nicettl,hops,numsec,"from",niceTime,":", pkts_in_this_second[addr]," packets at ",(bits_in_this_second[addr]/interval_seconds),"bits/sec")
      bits_in_this_second[addr] = 0
      pkts_in_this_second[addr] = 0

    if pkt == "NOMESG":
        return

    lastPacketInterval[addr] = thisPacketInterval
    pkts_in_this_second[addr] = pkts_in_this_second[addr] + 1
    bits_in_this_second[addr] = bits_in_this_second[addr] + bitsRcv

    try:
      obj = json.loads(pkt.decode())
      latency = rcvTime - obj["time"]
      seqdiff = obj["seq"] - lastSeqNum[addr]
      if seqdiff != 1 and lastSeqNum[addr] > -1:
        status("DETAIL: Out of sequence packet!",lastSeqNum[addr],"->",obj["seq"])
      lastSeqNum[addr] = obj["seq"]
      if ttl >= 0:
        lastHops[addr] = obj["initial_ttl"] - ttl

      if display_spinner:
        status("\r",next(spinner), end='', flush=True, sep="")
      if display_detail:
        hops = ""
        if lastHops[addr] > -1:
          hops = "("+str(lastHops[addr])+" hops)"
        niceHops = "("+str(lastHops[addr])+" hops)"
        status("Receive",addport,nicetos,nicettl,niceHops,"Seq=",obj["seq"]);

    except: 
      # can't parse payload
      if display_detail:
        status("DETAIL: Received unknown data from ",addr," total ",bitsRcv,"bits",nicettl,nicetos)
      lastHops[addr] = -1

def status(*msg):
    print(*msg)

def run(groups, port, iface=None, bind_group=None, jpeg=False, fname=""):
    global ts_data
    global ts_data_start
    # generally speaking you want to bind to one of the groups you joined in
    # this script,
    # but it is also possible to bind to group which is added by some other
    # programs (like another python program instance of this)

    # assert bind_group in groups + [None], \
    #     'bind group not in groups to join'
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)

    # allow reuse of socket (to allow another instance of python running this
    # script binding to the same ip/port)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

    sock.bind(('' if bind_group is None else bind_group, port))
    for group in groups:
        status("Listening to",group,":",port)
        mreq = struct.pack(
            '4sl' if iface is None else '4s4s',
            socket.inet_aton(group),
            socket.INADDR_ANY if iface is None else socket.inet_aton(iface))

        sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)

    # IP_RECVTTL is 12
    try:
        sock.setsockopt(socket.IPPROTO_IP, 12, 1)
    except:
        status("ERR: Can't receive TTL")

    # IP_REVCTOS is 13
    try:
        sock.setsockopt(socket.IPPROTO_IP, 13, 1)
    except:
        status("ERR: Can't receive TOS")

    sock.settimeout(1)
    last_seqnum=-1
    pktcount = 0;
    while True:
        try:
            resp = sock.recvmsg(65536, 1024)
            data = resp[0]
            ancdata = resp[1]
            flags = resp[2]
            add = resp[3]
            tos = -1
            ttl = -1
            if len(ancdata) > 0:
                # ancdata is an array of 
                #    cmsg_level, cmsg_type, cmsg_data
                # ttl = anddata[0]
                ttlmsg = ancdata[0]
                tosmsg = ancdata[1]
                ttlbytes = ttlmsg[2]
                tosbytes = tosmsg[2]
                ttl = int.from_bytes(ttlbytes, byteorder='little', signed=False)
                tos = int.from_bytes(tosbytes, byteorder='little', signed=False)

            if jpeg:
              try:
                seqbtes = data[2],data[3]
                seqnum = int.from_bytes(seqbtes, byteorder='big')
                if last_seqnum >= 0 and seqnum != last_seqnum +1:
                  if last_seqnum == 65535 and seqnum == 0:
                    status("SeqNum rollover")
                  else:
                    print("Seqnum discontinuity",last_seqnum,"to",seqnum,"Resetting stored stream");
                    ts_data = bytearray()
                    pktcount = 0
                last_seqnum = seqnum
                pktcount = pktcount + 1
                if ts_data_start == 0:
                  ts_data_start = current_nano_time()
                # trim rtp header -- first 12 bytes
#                data = data[12:]
                ts_data.extend(data)
              except Exception as ex: 
                status("ERROR",ex)
              finally:
                enough_data = False
                timetaken = current_nano_time() - ts_data_start
                if len(ts_data) > 1000000000:
                  enough_data = True
                if current_nano_time() - ts_data_start > 10000000:
                  enough_data = True
                if enough_data:
                  status("Byte cache full.",pktcount,"packets total",len(ts_data),"bytes in time=",timetaken,"writing to",fname)
                  bps = 8*len(ts_data)*1000000/timetaken
                  f = open(fname,'wb')
                  f.write(ts_data)
                  f.close()
                  ts_data = bytearray()
#                  print("Receive Time:",round(timetaken/1000000,2)," seconds")
                  #print("BITRATE="+str(round(bps/1000000,2))+"Mbit;TOS="+str(tos)+";TTL="+str(ttl)+";SRC="+str(add[0]))
                  print(str(round(bps/1000000,2))+"Mbit;"+str(tos)+";"+str(ttl)+";"+str(add[0]))
                  raise SystemExit
            else:
              parse(add, ttl, tos, data)
        except KeyboardInterrupt:
            raise SystemExit
        except socket.timeout:
            print("Time out")
            if jpeg:
              raise SystemExit
        except Exception as ex:
            parse("0.0.0.0",-2,-2,"NOMESG")


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--port', type=int, default=19900, help="Port to listen on")
    parser.add_argument('-v', '--showdetail', action='store_true', help="Print detail for every packet recieved")
    parser.add_argument('-d', '--dumpts', help="Decode an RTP steram as a ts")
    parser.add_argument('-g', '--groups', default=["239.5.6.7"], nargs='*',
                        help='multicast groups (ip addrs) to listen and join')
    parser.add_argument(
        '--iface', default=None,
        help='local interface to use for listening to multicast data; '
        'if unspecified, any interface would be chosen')
    parser.add_argument(
        '--bind-group', default=None,
        help='multicast groups (ip addrs) to bind to for the udp socket; '
        'should be one of the multicast groups joined globally '
        '(not necessarily joined in this python program) '
        'in the interface specified by --iface. '
        'If unspecified, bind to 0.0.0.0 '
        '(all addresses (all multicast addresses) of that interface)')
    args = parser.parse_args()
    status("Listening to",args.groups)
    if args.showdetail:
      display_detail = 1
    fname="/tmp/"+args.groups[0]+".ts"
    dumpts = True
    if args.dumpts == None:
        dumpts = False
    else:
        fname = args.dumpts
    run(args.groups, args.port, args.iface, args.bind_group, args.dumpts, fname)
